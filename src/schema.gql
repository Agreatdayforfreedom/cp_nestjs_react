# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Project {
  id: Int!
  title: String!
  description: String!
  owner: User!
  members: [Member!]!
  membersTotal: Int
  status: Boolean
}

type Pagination {
  projects: [Project!]!
  endIndex: Float!
}

type Member {
  id: Int!
  role: String
  ban: String
  project: Project!
  user: User
  notificationType: String
}

type User {
  id: Int!
  username: String!
  avatar: String!
  email: String!
  password: String
}

type Profile {
  id: Int!
  username: String!
  avatar: String!
  email: String!
  password: String
  projectId: Int
  currentProjectMember: Member
}

type Label {
  id: Int!
  labelName: String!
  color: String!
  issue: Issue
}

type Issue {
  id: Int!
  title: String!
  description: String!
  labels: [Label]!
  issueStatus: IssueStatus!
  created_at: DateTime!
  owner: Member!
  updated_at: DateTime!
  notificationType: String
}

enum IssueStatus {
  OPEN
  CLOSED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Comment {
  id: Int!
  content: String!
  issue: Issue!
  owner: Member!
  created_at: DateTime!
  updated_at: DateTime!
}

type RequestProject {
  id: Int!
  requestStatus: RequestStatus!
  project: Project!
  user: User!
}

enum RequestStatus {
  PENDING
  REJECTED
  ACCEPTED
}

type Auth {
  token: String!
  user: User!
}

type Query {
  findUsers: [User!]!
  profile: Profile!
  refreshToken(id: Int!, projectId: Int!): Auth!
  findAllProjects: [Project!]!
  findMyProjects: [Project!]!
  findProjectsMemberOf: [Project!]!
  findOneProject(id: Int!): Project!
  findProjectByPage(offset: Int!, limit: Int): Pagination!
  findMembers(projectId: Int!): [Member!]!
  findIssues(projectId: Int!): [Issue!]!
  findIssue(issueId: Int!): Issue!
  getLabels(issueId: Int!): [Label!]!
  findComments(issueId: Int!): [Comment!]!
  findRequests(projectId: Int!): [RequestProject!]!
}

type Mutation {
  signup(username: String!, email: String!, password: String!): Auth!
  login(username: String!, password: String!): Auth!
  createProject(title: String!, description: String!): Project!
  updateProject(title: String, description: String, id: Int!): Project
  deleteProject(id: Float!): String
  addMember(nextMemberId: Int!, projectId: Int!): Member!
  banMember(memberWhoBanId: Int!, memberToBanId: Int!, banType: String!): Member!
  changeMemberRole(memberId: Int!, roleType: String!): Member!
  removeMember(memberId: Int!, projectId: Int!): Member!
  newIssue(title: String!, projectId: Int!, description: String!, labels: Int): Issue!
  addLabels(issueId: Int!, labels: [Int!]!): Issue!
  updateIssue(title: String, projectId: Int, description: String, labels: Int, id: Int!): Issue!
  closeIssue(issueId: Int!): Issue!
  newLabel(issueId: Int, labelName: String!, color: String!): Label!
  quitLabel(labelId: Int!): Label!
  newComment(issueId: Int!, content: String!): Comment!
  updateComment(commentId: Int!, content: String!): Comment!
  deleteComment(commentId: Int!): Comment!
  requestProject(projectId: Int!): RequestProject!
  acceptOrRejectRequest(requestId: Int!, status: RequestStatus!): RequestProject!
}

type Subscription {
  memberSub(userId: Int!, projectId: Int!): Member!
  commentSub: Comment!
}